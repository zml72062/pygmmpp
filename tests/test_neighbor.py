import sys
try:
    sys.path.append('.')
except:
    pass
from pygmmpp.utils.neighbor import *
import torch


def test_neighbor_1():
    edge_index: torch.Tensor = torch.tensor(
        [[0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 0, 4, 6, 6, 7, 7, 8, 8,
          9, 9, 3, 8, 13, 13, 12, 12, 11, 11, 10, 10, 9, 12, 14, 14, 15, 14, 16],
         [1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 0, 5, 6, 4, 7, 6, 8, 7, 9,
          8, 3, 9, 13, 8, 12, 13, 11, 12, 10, 11, 9, 10, 14, 12, 15, 14, 16, 14]],
        dtype=int
    )
    node_mask = k_hop_neighbor(0, 5, edge_index, 17)
    assert node_mask.shape == (5, 17)
    assert torch.all(node_mask == torch.tensor(
        [[0, 1, 0, 0, 0, 1]+[0]*11,
         [0, 0, 1, 0, 1]+[0]*12,
         [0, 0, 0, 1, 0, 0, 1]+[0]*10,
         [0]*7+[1, 0, 1]+[0]*7,
         [0]*8+[1, 0, 1]+[0]*6], dtype=torch.bool
    ))


def test_neighbor_2():
    edge_index: torch.Tensor = torch.tensor(
        [[0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 0, 4, 6, 6, 7, 7, 8, 8,
          9, 9, 3, 8, 13, 13, 12, 12, 11, 11, 10, 10, 9, 12, 14, 14, 15, 14, 16],
         [1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 0, 5, 6, 4, 7, 6, 8, 7, 9,
            8, 3, 9, 13, 8, 12, 13, 11, 12, 10, 11, 9, 10, 14, 12, 15, 14, 16, 14]],
        dtype=int
    )
    edge_dict: dict[str, torch.LongTensor] = k_hop_edge_index(
        3, edge_index, 17)

    assert set(edge_dict.keys()) == {'edge_index2', 'edge_index3'}
    torch.testing.assert_close(
        edge_dict['edge_index2'], torch.tensor(
            [[0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7,
              7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12,
              12, 13, 13, 13, 13, 14, 14, 15, 15, 16, 16],
             [2, 4, 3, 5, 0, 4, 9, 1, 5, 6, 8, 10, 0, 2, 7, 9, 1, 3, 6, 3, 5, 8, 4,
              9, 13, 3, 6, 10, 12, 2, 4, 7, 11, 13, 3, 8, 12, 9, 13, 14, 8, 10, 15,
              16, 7, 9, 11, 14, 11, 13, 12, 16, 12, 15]]
        ), rtol=1e-9, atol=1e-9
    )
    torch.testing.assert_close(
        edge_dict['edge_index3'], torch.tensor(
            [[0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7,
              7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11,
                12, 12, 13, 13, 13, 13, 13, 14, 14, 15, 15, 16, 16],
             [3, 6, 4, 9, 5, 6, 8, 10, 0, 7, 11, 13, 1, 8, 10, 2, 7, 9, 0, 2, 9,
              13, 3, 5, 10, 12, 2, 4, 11, 14, 1, 5, 6, 12, 2, 4, 7, 13, 14, 3, 8,
              15, 16, 7, 9, 3, 6, 10, 15, 16, 8, 10, 11, 13, 11, 13]]
        ), rtol=1e-9, atol=1e-9
    )
